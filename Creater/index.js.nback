// image: "data:image/png;base64," + image,
// pdf: "data:application/pdf;base64," + pdf,

const MAX = 8192;
const fs = require("fs");
const Model = require("./model");
const mongoose = require("mongoose");
let num = 0;
require("dotenv").config();
const mongoString = process.env.DATABASE_URL;
mongoose.connect(mongoString);
const database = mongoose.connection;
database.on("error", (error) => {
    console.log(error);
});
database.once("connected", async () => {
    console.log("Database Connected");
    const data = await Model.find();
    const a = await Model.deleteMany({});
    // console.log(data);
    fs.readdir(__dirname + "/book", async (err, res) => {
        res.forEach(async (i, o) => {
            let name = i.substring(0, i.length - 4);
            console.log(o + 1 + "/" + res.length);
            const image = fs.readFileSync(
                __dirname + "/book/" + name + ".png",
                {
                    encoding: "base64",
                }
            );
            const pdf = fs.readFileSync(__dirname + "/pdf/" + name + ".pdf", {
                encoding: "base64",
            });
            const pdfS = splitString(pdf, Math.floor(pdf.length / 20));
            if (o == 8) {
                console.log(calculateSizeInMB(pdf));
                let a = 0;
                pdfS.map((chunk) => (a += calculateSizeInMB(chunk)));
                console.log(pdfS.length);

                console.log(calculateSizeInMB(pdfS.join("")));
            }
            const data = new Model({
                _id: o + 1,
                name: i,
                image: image,
                category: "none",
                language: "English",
                author: "Not me",
                pdf: pdf,
            });
            const dataSave = await data.save();
            num++;
            console.log(num + ":" + res.length);
        });
    });
});

function calculateSizeInMB(str) {
    const byteSize = Buffer.from(str, "utf-8").length;

    const sizeInMB = byteSize / (1024 * 1024);

    return sizeInMB;
}

function splitString(str, chunkLength) {
    const regex = new RegExp(`.{1,${chunkLength}}`, "g");
    return str.match(regex);
}
